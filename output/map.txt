map
----
s  <C-H>       * <C-G>"_c
x  <Tab>       * :call UltiSnips#SaveLastVisualSelection()<CR>gvs
s  <Tab>       * <Esc>:call UltiSnips#ExpandSnippet()<CR>
s  <C-R>       * <C-G>"_c<C-R>
n  <C-S>       * :w<CR>
n  <Space>un     <Plug>(UnicodeSwapCompleteName)
n  <Space>ca     <Plug>NERDCommenterAltDelims
x  <Space>cu     <Plug>NERDCommenterUncomment
n  <Space>cu     <Plug>NERDCommenterUncomment
x  <Space>cb     <Plug>NERDCommenterAlignBoth
n  <Space>cb     <Plug>NERDCommenterAlignBoth
x  <Space>cl     <Plug>NERDCommenterAlignLeft
n  <Space>cl     <Plug>NERDCommenterAlignLeft
n  <Space>cA     <Plug>NERDCommenterAppend
x  <Space>cy     <Plug>NERDCommenterYank
n  <Space>cy     <Plug>NERDCommenterYank
x  <Space>cs     <Plug>NERDCommenterSexy
n  <Space>cs     <Plug>NERDCommenterSexy
x  <Space>ci     <Plug>NERDCommenterInvert
n  <Space>ci     <Plug>NERDCommenterInvert
n  <Space>c$     <Plug>NERDCommenterToEOL
x  <Space>cn     <Plug>NERDCommenterNested
n  <Space>cn     <Plug>NERDCommenterNested
x  <Space>cm     <Plug>NERDCommenterMinimal
n  <Space>cm     <Plug>NERDCommenterMinimal
x  <Space>c<Space>   <Plug>NERDCommenterToggle
n  <Space>c<Space>   <Plug>NERDCommenterToggle
x  <Space>cc     <Plug>NERDCommenterComment
n  <Space>cc     <Plug>NERDCommenterComment
n  <Space>lc     :call TimeLogLine('continue_task')<CR>
n  <Space>li     :call TimeLogLine('interval_task')<CR>
n  <Space>le     :call TimeLogLine('end_task')<CR>
n  <Space>ls     :call TimeLogLine('start_task')<CR>
n  <Space>s/   * :FlyGrep<CR>
n  <Space>p    * <Plug>(ctrlp)
n  <Space>     * :WhichKey ' '<CR>
n  <Space>x      <Plug>TranslateX
v  <Space>r      <Plug>TranslateRV
n  <Space>r      <Plug>TranslateR
v  <Space>w      <Plug>TranslateWV
n  <Space>w      <Plug>TranslateW
v  <Space>t      <Plug>TranslateV
n  <Space>t      <Plug>Translate
n  <Space>bb   * :Thumbnail<CR>
n  <Space>tb   * :TagbarToggle<CR>
n  <Space>5    * :MundoToggle<CR>
n  <Space>--   * :ifont -<CR>
n  <Space>++   * :ifont +<CR>
n  <Space>9    * :vertical resize+5<CR>
n  <Space>0    * :vertical resize-5<CR>
n  <Space>@    * :res -5<CR>
n  <Space>#    * :res +5<CR>
n  <Space>l    * :nohlsearch<CR>:diffupdate<CR>:syntax sync fromstart<CR><C-L>
n  <Space>h    * <C-W>h
n  <Space>wj   * :set splitbelow<CR>:split<CR>
n  <Space>wk   * :set nosplitbelow<CR>:split<CR>
n  <Space>wh   * :set nosplitright<CR>:vsplit<CR>
n  <Space>wl   * :set splitright<CR>:vsplit<CR>
   <Space>zz     :call ToggleFold()<CR>
n  <Space>tc   * :tabe<CR>
n  <Space>k    * <C-W>k
n  <Space>j    * <C-W>j
v  <Space>q    * <Esc>
n  <Space>s    * <C-S>
n  <Space>v    * <C-V>
n  <Space>bD   * :bdelete!<CR>
n  <Space>bd   * :bdelete <CR>
n  <Space>bh   * :bhide<CR>
n  <Space>bn   * :bnext<CR>
n  <Space>bp   * :bprevious<CR>
n  <Space>bo   * :enew<CR>
n  <Space>bl   * :ls<CR>
x  ,             <Plug>Sneak_,
o  ,             <Plug>Sneak_,
n  ,             <Plug>Sneak_,
n  -             <Plug>VinegarUp
x  ;             <Plug>Sneak_;
o  ;             <Plug>Sneak_;
n  ;             <Plug>Sneak_;
   H           * ^
   L           * $
n  N           * 'nN'[v:searchforward]
n  S             <Plug>Sneak_S
x  Z             <Plug>Sneak_S
o  Z             <Plug>Sneak_S
n  \--         * :ifont -<CR>
n  \++         * :ifont +<CR>
n  ga            <Plug>(characterize)
v  gx            <Plug>NetrwBrowseXVis
n  gx            <Plug>NetrwBrowseX
v  jk          * <Esc>
n  n           * 'Nn'[v:searchforward]
x  s             <Plug>Sneak_s
n  s             <Plug>Sneak_s
n  y<C-G>      & :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>
o  z             <Plug>Sneak_s
n  <Plug>VinegarVerticalSplitUp * :call <SNR>115_opendir('vsplit')<CR>
n  <Plug>VinegarSplitUp * :call <SNR>115_opendir('split')<CR>
n  <Plug>VinegarTabUp * :call <SNR>115_opendir('tabedit')<CR>
n  <Plug>VinegarUp * :call <SNR>115_opendir('edit')<CR>
n  <Plug>TranslateX * :TranslateX<CR>
v  <Plug>TranslateRV * :TranslateR<CR>
n  <Plug>TranslateR * :TranslateR<CR>
v  <Plug>TranslateWV * :TranslateW<CR>
n  <Plug>TranslateW * :TranslateW<CR>
v  <Plug>TranslateV * :Translate<CR>
n  <Plug>Translate * :Translate<CR>
o  <Plug>SneakPrevious   <Plug>Sneak_,
o  <Plug>SneakNext   <Plug>Sneak_;
x  <Plug>SneakPrevious   <Plug>Sneak_,
x  <Plug>SneakNext   <Plug>Sneak_;
n  <Plug>SneakPrevious   <Plug>Sneak_,
n  <Plug>SneakNext   <Plug>Sneak_;
o  <Plug>(SneakStreakBackward)   <Plug>SneakLabel_S
o  <Plug>(SneakStreak)   <Plug>SneakLabel_s
x  <Plug>(SneakStreakBackward)   <Plug>SneakLabel_S
x  <Plug>(SneakStreak)   <Plug>SneakLabel_s
n  <Plug>(SneakStreakBackward)   <Plug>SneakLabel_S
n  <Plug>(SneakStreak)   <Plug>SneakLabel_s
x  <Plug>VSneakPrevious   <Plug>Sneak_,
x  <Plug>VSneakNext   <Plug>Sneak_;
x  <Plug>VSneakBackward   <Plug>Sneak_S
x  <Plug>VSneakForward   <Plug>Sneak_s
n  <Plug>SneakBackward   <Plug>Sneak_S
n  <Plug>SneakForward   <Plug>Sneak_s
o  <Plug>SneakLabel_S * :<C-U>call sneak#wrap(v:operator, 2, 1, 2, 2)<CR>
o  <Plug>SneakLabel_s * :<C-U>call sneak#wrap(v:operator, 2, 0, 2, 2)<CR>
x  <Plug>SneakLabel_S * :<C-U>call sneak#wrap(visualmode(), 2, 1, 2, 2)<CR>
x  <Plug>SneakLabel_s * :<C-U>call sneak#wrap(visualmode(), 2, 0, 2, 2)<CR>
n  <Plug>SneakLabel_S * :<C-U>call sneak#wrap('', 2, 1, 2, 2)<CR>
n  <Plug>SneakLabel_s * :<C-U>call sneak#wrap('', 2, 0, 2, 2)<CR>
o  <Plug>Sneak_T * :<C-U>call sneak#wrap(v:operator, 1, 1, 0, 0)<CR>
o  <Plug>Sneak_t * :<C-U>call sneak#wrap(v:operator, 1, 0, 0, 0)<CR>
x  <Plug>Sneak_T * :<C-U>call sneak#wrap(visualmode(), 1, 1, 0, 0)<CR>
x  <Plug>Sneak_t * :<C-U>call sneak#wrap(visualmode(), 1, 0, 0, 0)<CR>
n  <Plug>Sneak_T * :<C-U>call sneak#wrap('', 1, 1, 0, 0)<CR>
n  <Plug>Sneak_t * :<C-U>call sneak#wrap('', 1, 0, 0, 0)<CR>
o  <Plug>Sneak_F * :<C-U>call sneak#wrap(v:operator, 1, 1, 1, 0)<CR>
o  <Plug>Sneak_f * :<C-U>call sneak#wrap(v:operator, 1, 0, 1, 0)<CR>
x  <Plug>Sneak_F * :<C-U>call sneak#wrap(visualmode(), 1, 1, 1, 0)<CR>
x  <Plug>Sneak_f * :<C-U>call sneak#wrap(visualmode(), 1, 0, 1, 0)<CR>
n  <Plug>Sneak_F * :<C-U>call sneak#wrap('', 1, 1, 1, 0)<CR>
n  <Plug>Sneak_f * :<C-U>call sneak#wrap('', 1, 0, 1, 0)<CR>
o  <Plug>Sneak_, * :<C-U>call <SNR>110_rpt(v:operator, 1)<CR>
o  <Plug>Sneak_; * :<C-U>call <SNR>110_rpt(v:operator, 0)<CR>
x  <Plug>Sneak_, * :<C-U>call <SNR>110_rpt(visualmode(), 1)<CR>
x  <Plug>Sneak_; * :<C-U>call <SNR>110_rpt(visualmode(), 0)<CR>
n  <Plug>Sneak_, * :<C-U>call <SNR>110_rpt('', 1)<CR>
n  <Plug>Sneak_; * :<C-U>call <SNR>110_rpt('', 0)<CR>
o  <Plug>SneakRepeat * :<C-U>call sneak#wrap(v:operator, sneak#util#getc(), sneak#util#getc(), sneak#util#getc(), sneak#util#getc())<CR>
o  <Plug>Sneak_S * :<C-U>call sneak#wrap(v:operator, 2, 1, 2, 1)<CR>
o  <Plug>Sneak_s * :<C-U>call sneak#wrap(v:operator, 2, 0, 2, 1)<CR>
x  <Plug>Sneak_S * :<C-U>call sneak#wrap(visualmode(), 2, 1, 2, 1)<CR>
x  <Plug>Sneak_s * :<C-U>call sneak#wrap(visualmode(), 2, 0, 2, 1)<CR>
n  <Plug>Sneak_S * :<C-U>call sneak#wrap('', 2, 1, 2, 1)<CR>
n  <Plug>Sneak_s * :<C-U>call sneak#wrap('', 2, 0, 2, 1)<CR>
n  <Plug>(characterize) & :<C-U>echo <SNR>101_info(matchstr(getline('.')[col('.')-1:-1],'.'))<CR>
v  <Plug>SearchVisual   :<C-U>call search#search_visual('')<CR>
n  <Plug>SearchNormal   :set operatorfunc=search#search_normal<CR>g@
v  <F4>          <Plug>(MakeDigraph)
n  <F4>          <Plug>(MakeDigraph)
n  <Plug>(UnicodeSwapCompleteName) & :<C-U>call <SNR>98_ToggleUnicodeCompletion()<CR>
n  <Plug>(UnicodeGA) & :<C-U>UnicodeName<CR>
v  <Plug>(MakeDigraph) & :<C-U>call unicode#GetDigraph(visualmode(), 1)<CR>
n  <Plug>(MakeDigraph) & :set opfunc=unicode#GetDigraph<CR>g@
s  <Del>       * <C-G>"_c
s  <BS>        * <C-G>"_c
s  <C-Tab>     * <Esc>:call UltiSnips#ListSnippets()<CR>
x  <Plug>(openbrowser-smart-search) * :<C-U>call openbrowser#_keymap_smart_search('v')<CR>
n  <Plug>(openbrowser-smart-search) * :<C-U>call openbrowser#_keymap_smart_search('n')<CR>
x  <Plug>(openbrowser-search) * :<C-U>call openbrowser#_keymap_search('v')<CR>
n  <Plug>(openbrowser-search) * :<C-U>call openbrowser#_keymap_search('n')<CR>
x  <Plug>(openbrowser-open-incognito) * :<C-U>call openbrowser#_keymap_open('v', 0, ['--incognito'])<CR>
n  <Plug>(openbrowser-open-incognito) * :<C-U>call openbrowser#_keymap_open('n', 0, ['--incognito'])<CR>
x  <Plug>(openbrowser-open) * :<C-U>call openbrowser#_keymap_open('v')<CR>
n  <Plug>(openbrowser-open) * :<C-U>call openbrowser#_keymap_open('n')<CR>
n  <Plug>NERDCommenterAltDelims * :call <SNR>71_SwitchToAlternativeDelimiters(1)<CR>
x  <Plug>NERDCommenterUncomment * :call NERDComment("x", "Uncomment")<CR>
n  <Plug>NERDCommenterUncomment * :call NERDComment("n", "Uncomment")<CR>
x  <Plug>NERDCommenterAlignBoth * :call NERDComment("x", "AlignBoth")<CR>
n  <Plug>NERDCommenterAlignBoth * :call NERDComment("n", "AlignBoth")<CR>
x  <Plug>NERDCommenterAlignLeft * :call NERDComment("x", "AlignLeft")<CR>
n  <Plug>NERDCommenterAlignLeft * :call NERDComment("n", "AlignLeft")<CR>
n  <Plug>NERDCommenterAppend * :call NERDComment("n", "Append")<CR>
x  <Plug>NERDCommenterYank * :call NERDComment("x", "Yank")<CR>
n  <Plug>NERDCommenterYank * :call NERDComment("n", "Yank")<CR>
x  <Plug>NERDCommenterSexy * :call NERDComment("x", "Sexy")<CR>
n  <Plug>NERDCommenterSexy * :call NERDComment("n", "Sexy")<CR>
x  <Plug>NERDCommenterInvert * :call NERDComment("x", "Invert")<CR>
n  <Plug>NERDCommenterInvert * :call NERDComment("n", "Invert")<CR>
n  <Plug>NERDCommenterToEOL * :call NERDComment("n", "ToEOL")<CR>
x  <Plug>NERDCommenterNested * :call NERDComment("x", "Nested")<CR>
n  <Plug>NERDCommenterNested * :call NERDComment("n", "Nested")<CR>
x  <Plug>NERDCommenterMinimal * :call NERDComment("x", "Minimal")<CR>
n  <Plug>NERDCommenterMinimal * :call NERDComment("n", "Minimal")<CR>
x  <Plug>NERDCommenterToggle * :call NERDComment("x", "Toggle")<CR>
n  <Plug>NERDCommenterToggle * :call NERDComment("n", "Toggle")<CR>
x  <Plug>NERDCommenterComment * :call NERDComment("x", "Comment")<CR>
n  <Plug>NERDCommenterComment * :call NERDComment("n", "Comment")<CR>
x  <Plug>(Limelight) * :Limelight<CR>
n  <Plug>(Limelight) * :set opfunc=limelight#operator<CR>g@
v  <Plug>NetrwBrowseXVis * :<C-U>call netrw#BrowseXVis()<CR>
n  <Plug>NetrwBrowseX * :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())<CR>
o  <D-g>         <Esc><D-g>
v  <D-g>         <Esc><D-g>
n  <D-g>       * n
o  <D-f>         <Esc><D-f>
v  <D-f>         <Esc><D-f>
n  <D-f>       * /
o  <D-a>         <Esc><D-a>
v  <D-a>         <Esc><D-a>
n  <D-a>       * :if &slm != ""|exe ":norm gggH<C-O>G"| else|exe ":norm ggVG"|endif<CR>
o  <D-z>         <Esc><D-z>
v  <D-z>         <Esc><D-z>gv
n  <D-z>       * u
o  <S-D-s>       <Esc><D-s>
v  <S-D-s>       <Esc><D-s>gv
n  <S-D-s>     * :browse confirm saveas<CR>
o  <D-s>         <Esc><D-s>
v  <D-s>         <Esc><D-s>gv
n  <D-s>       * :if expand("%") == ""|browse confirm w| else|confirm w|endif<CR>
o  <D-w>         <Esc><D-w>
v  <D-w>         <Esc><D-w>gv
n  <D-w>       * :if winheight(2) < 0 | confirm enew | else | confirm close | endif<CR>
o  <D-o>         <Esc><D-o>
v  <D-o>         <Esc><D-o>gv
n  <D-o>       * :browse confirm e<CR>
o  <D-n>         <Esc><D-n>
v  <D-n>         <Esc><D-n>gv
n  <D-n>       * :confirm enew<CR>
x  <BS>          "-d
v  <D-x>       * "+x
v  <D-c>       * "+y
v  <D-v>       & "-c<Esc>:call paste#Paste()<CR>
n  <D-v>       * "+gP
